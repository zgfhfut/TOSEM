#include "stdafx.h"

# include "Global.h"

const  double EPSINON = 0.0000001;    //minimal precision

//int no_subsys[MAX_SYSTEM] = {1, 2, 3, 3, 4, 4, 4, 3, 3, 2, 1};//complex system
//int no_subsys[MAX_SYSTEM] = { 1, 2, 3, 3, 3, 4, 4, 5, 5, 4, 4, 3, 3, 3, 2, 1 };//50个模块

//int no_subsys[MAX_SYSTEM] = { 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 1 };//100个模块

extern double para_module[nreal][5];

/*
double para_module[nreal][5] = {
	34.820399, 0.006002, 3.449925, 6.031361, 4.028361,
	203.987243, 0.000402, 3.535232, 6.179839, 5.059343,
	276.563311, 0.000550, 3.437648, 6.098111, 5.067870,
	233.729057, 0.000522, 3.510869, 6.174883, 5.004013,
	296.353038, 0.000874, 3.445924, 6.118674, 4.967470,
	333.254494, 0.000652, 3.463137, 6.134312, 5.007413,
	345.591601, 0.000560, 3.504808, 6.124125, 4.932820,
	305.169836, 0.000781, 3.433097, 6.073568, 5.023496,
	210.629597, 0.000766, 3.509391, 6.146031, 4.968880,
	211.856441, 0.000515, 3.421621, 6.119828, 4.985714,
	216.837062, 0.000768, 3.501929, 6.040284, 5.001376,
	307.238990, 0.000302, 3.516962, 6.176720, 5.039653,
	215.829951, 0.000384, 3.450676, 6.053554, 4.943263,
	226.848659, 0.000478, 3.469408, 6.062221, 5.002945,
	316.151921, 0.000620, 3.503453, 6.026313, 5.070165,
	243.758965, 0.000584, 3.504707, 6.076205, 5.052672,
	244.203009, 0.000450, 3.473428, 6.141716, 5.095416,
	298.660237, 0.000821, 3.527551, 6.062386, 4.956520,
	261.497848, 0.000355, 3.515470, 6.091757, 4.943666,
	294.279305, 0.000495, 3.400439, 6.101608, 4.970589,
	249.027985, 0.000667, 3.466694, 6.032527, 5.008194,
	224.816126, 0.000566, 3.509986, 6.050600, 5.049040,
	344.790490, 0.000397, 3.499232, 6.083035, 4.966561,
	310.017701, 0.000602, 3.471308, 6.121946, 5.073577,
	228.734703, 0.000409, 3.409467, 6.094528, 4.946950,
	288.717307, 0.000448, 3.440294, 6.048415, 5.039445,
	235.404523, 0.000489, 3.440706, 6.098715, 4.908008,
	317.928098, 0.000790, 3.421635, 6.146568, 4.953560,
	231.389813, 0.000840, 3.448575, 6.190027, 5.044041,
	338.271737, 0.000844, 3.446886, 6.027137, 5.035270,
	216.493728, 0.000832, 3.414493, 6.043068, 4.979196,
	275.084689, 0.000886, 3.519704, 6.008344, 5.085620,
	287.994018, 0.000689, 3.485806, 6.064229, 4.994601,
	264.038514, 0.000310, 3.453793, 6.022773, 5.032078,
	289.884640, 0.000601, 3.515703, 6.076095, 5.065233,
	240.517899, 0.000477, 3.481855, 6.025874, 5.087115,
	298.019349, 0.000400, 3.535296, 6.110819, 4.995010,
	231.586657, 0.000671, 3.509244, 6.024207, 4.906494,
	210.588397, 0.000309, 3.458051, 6.014832, 4.952864,
	256.714072, 0.000400, 3.543596, 6.196802, 5.021061,
	265.631581, 0.000871, 3.487037, 6.004395, 4.955086,
	297.712638, 0.000899, 3.519237, 6.026289, 5.068950,
	286.886196, 0.000374, 3.511771, 6.123380, 5.035087,
	208.006531, 0.000320, 3.522419, 6.118790, 4.999881,
	310.040590, 0.000706, 3.537503, 6.093252, 4.915406,
	315.231788, 0.000730, 3.478257, 6.007257, 5.082427,
	306.781213, 0.000584, 3.429669, 6.098465, 5.073913,
	297.964415, 0.000878, 3.401987, 6.085434, 5.045769,
	248.396252, 0.000395, 3.473244, 6.104147, 4.900934,
	30.202033, 0.005911, 3.414379, 6.177453, 4.076775,

};



parameters for modules, the last is the threshold reliability
double para_module[nreal][5] = {
	30.950957, 0.005886, 3.526846, 6.054506, 4.023411,
	275.418867, 0.000357, 3.406738, 6.148863, 4.962429,
	227.095859, 0.000690, 3.422120, 6.010816, 4.957997,
	312.196722, 0.000467, 3.440014, 6.035688, 4.993167,
	213.005463, 0.000674, 3.514650, 6.145708, 4.951009,
	229.554125, 0.000882, 3.529441, 6.004108, 4.924610,
	250.817896, 0.000824, 3.545569, 6.030757, 4.991372,
	244.615009, 0.000359, 3.481338, 6.143040, 4.909870,
	335.808893, 0.000306, 3.465842, 6.068062, 5.062719,
	271.051668, 0.000851, 3.517058, 6.042622, 5.034788,
	255.441450, 0.000589, 3.517342, 6.150932, 4.972353,
	207.058931, 0.000739, 3.425301, 6.146788, 5.072655,
	223.978393, 0.000442, 3.481095, 6.139219, 4.976101,
	203.653066, 0.000332, 3.459085, 6.134623, 5.036534,
	251.971496, 0.000346, 3.524516, 6.185046, 5.002310,
	320.450453, 0.000468, 3.517182, 6.137675, 4.908448,
	285.146641, 0.000475, 3.432168, 6.001917, 4.991720,
	244.454787, 0.000699, 3.464409, 6.094736, 5.096765,
	209.462264, 0.000828, 3.416517, 6.066921, 5.008933,
	333.579516, 0.000627, 3.421081, 6.052077, 5.086071,
	215.170751, 0.000744, 3.518839, 6.193133, 4.949049,
	219.428083, 0.000564, 3.508530, 6.161126, 5.022526,
	335.946226, 0.000755, 3.470750, 6.126536, 4.983663,
	232.648701, 0.000878, 3.543335, 6.084036, 5.046434,
	223.786126, 0.000812, 3.486552, 6.061232, 5.089154,
	266.277047, 0.000613, 3.496733, 6.099448, 5.068883,
	329.500717, 0.000784, 3.540126, 6.062081, 5.002347,
	288.639485, 0.000770, 3.545967, 6.036244, 5.014573,
	276.444288, 0.000531, 3.490979, 6.084158, 5.078570,
	32.476577, 0.006137, 3.510352, 6.110288, 4.021973,
};
*/

int nobj;
int ncon;
int popsize;
int archsize;
double pcross_real;
double pmut_real;
double eta_m;

int currenteval;
int neval;

/**
* Z vector (ideal point)
*/
double * z_;
/**
* Lambda vectors
*/
double ** lambda_;
/**
* T: neighbour size
*/
int T_;
/**
* Neighborhood
*/
int ** neighborhood_;
/**
* delta: probability that parent solutions are selected from neighbourhood
*/
double delta_;
/**
* nr: maximal number of solutions replaced by each child solution
*/
int nr_;

double F_;

double phi_max_;
double epsilon_k_;

/*-------parameter setting in the algorithm------end---------*/

int niter;

double *min_realvar;
double *max_realvar;

double seed;
double oldrand[55];
int jrand;



